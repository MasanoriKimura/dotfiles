;; load-pathを追加する関数を定義
(defun add-to-load-path (&rest paths)
  (let (path)
    (dolist (path paths paths)
      (let ((default-directory (expand-file-name (concat user-emacs-directory path))))
        (add-to-list 'load-path default-directory)
        (if (fboundp 'nomal-top-level-add-subdirs-to-load-path)
            (nomal-top-level-add-subdirs-to-load-path))))))

;; 引数のディレクトリをサブディレクトリごとload-pathに追加
(add-to-load-path "elisp" "conf" "elpa" "public_repos")

;; (install-elisp "http://www.emacswiki.org/emacs/download/auto-install.el")
 (when (require 'auto-install nil t)
   ;; インストールディレクトリを設定する。初期値は ~/.emacs.d/auto-install/
   (setq auto-install-directory "~/.emacs.d/elisp/")
   ;; Emacswikiに登録されている elisp の名前を取得する
   (auto-install-update-emacswiki-package-name t)
   ;; 必要であればプロキシの設定を行う
   ;; (setq url-proxy-services '(("http" . "localhost:8339")))
   ;; install-elisp の関数を利用可能にする
   (auto-install-compatibility-setup))


;;;見た目に関する設定
;; スタートアップメッセージを非表示
(setq inhibit-startup-screen t)
;; tool-barを非表示。
(tool-bar-mode 0)
;; scroll-barを非表示。
(scroll-bar-mode 0)
;;フレームにメニューバーを表示しない
(menu-bar-mode 0)
;;メニューバーにファイルパスを表示する
(setq frame-title-format
(format "%%f - Emacs@%s" (system-name)))
;;モードラインに列数を表示する
(column-number-mode 1)


;;;定番設定
;;ガベッジコレクションを実行するまでの割り当てメモリの閾値を増やす
(setq gc-cons-threshold (* 50 gc-cons-threshold))
;;kill-lineで行末も削除する
(setq kill-whole-line t)
;;ログの記錄量を増やす
(setq message-log-max 10000)
;;履歴存数を増やす
(setq history-length 1000)
;;重複する履歴は保存しない
(setq history-delete-duplicates t)


;;;定番パッケージの設定
;;常にバッファ左に行番号を表示する
(global-linum-mode 1)
;;カーソルがどの関数の中にあるかをモードラインに表示する
(which-function-mode 1)


;;;最近使ったファイルを記録する
;;;"M-x recentf-open-files"でファイル一覧を表示。
(require 'recentf)
;;"recentf-save-file"で保存先を設定。
(setq recentf-save-file "~/.recentf")
;;
(setq recentf-exclude '("~/.recentf"))
;;直近何個の履歴を保存するかを設定する
(setq recentf-max-saved-items 5000)
;;履歴リストをいつクリーンアップ(重複や除外の整理)するかを設定
(setq recentf-auto-cleanup '10)
;;履歴の自動保存を設定。"run-with-idle-timer"を使って、定期的に"recentf-save-list"を実行。30秒に一度保存。
(run-with-idle-timer 30 t 'recentf-save-list)
;;recentfを有効にする
(recentf-mode 1)


;; paren-mode 対応する括弧を強調して表示する
(setq show-paren-delay 0) ; 表示までの秒数。初期値は0.125 
(show-paren-mode t) ; 有効化
;; parenのスタイル: expression は括弧内も強調表示
(setq show-paren-style 'expression)
;; フェイス(後述)を変更する
(set-face-background 'show-paren-match-face nil) 
(set-face-underline-p 'show-paren-match-face "yellow")

;; color-moccurの設定
(when (require 'color-moccur nil t)
  ;; M-oにoccur-by-moccurを割り当て
  (define-key global-map (kbd "M-o") 'occur-by-moccur)
  ;; スペース区切りでAND検索
  (setq moccur-split-word t)
  ;; ディレクトリ検索のとき除外するファイル
  (add-to-list 'dmoccur-exclusion-mask "\\.DS_Store")
  (add-to-list 'dmoccur-exclusion-mask "^#.+#$")
  ;; Migemoを利用できる環境であればMigemoを使う
  (when (and (executable-find "cmigemo")
	     (require 'migemo nil t))
    (setq moccur-use-migemo t)))

;; moccur-editの設定
(require 'moccur-edit nil t)

;; wdiredを読み込んだ後、diredモードにキーバインドを追加します
(require 'wdired)
(define-key dired-mode-map "r" 'wdired-change-to-wdired-mode)

;; exec-path変数にgitのコマンドパスを設定
(add-to-list 'exec-path "/usr/bin/git")


;;; Helmの設定(package.el)
(when (require 'package nil t)
  ;; パッケージリポジトリにMarmaladeを追加
  (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
  (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/"))
  (add-to-list 'package-archives '("ELPA" . "http://tromey.com/elpa/"))
  ;; インストールしたパッケージにロードパスを通してロードする
  (package-initialize))

;;; Helmの設定(helm)
(require 'helm-config)
(helm-descbinds-mode)
(require 'helm-migemo)
(setq helm-use-migemo t)

;;; Helmの設定(特に個人的な設定(大竹智也氏の))
;; Command+f で helm-for-files
(define-key global-map (kbd "s-f") 'helm-for-files)
;; C-x b で helm-for-files
(define-key global-map (kbd "C-x b") 'helm-for-files)
;; Command+y で anything-show-kill-ring
(define-key global-map (kbd "s-y") 'helm-show-kill-ring)
;; Command+r で anything-resume
(define-key global-map (kbd "s-r") 'helm-resume)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(initial-frame-alist (quote ((height . 53) (width . 165) (top . 0) (left . 0)))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;; カラーテーマの設定
(when (require 'color-theme nil t)
  ;; テーマを読み込む
  (color-theme-initialize)
  ;; テーマCalm Forestに変更する
  (color-theme-calm-forest))


;;;フォントの設定
;; aciiフォントMenloに
(set-face-attribute 'default nil
		    :family "Menlo"
		    :height 120)
;; 日本語フォントをヒラギノ明朝ProNに
(set-fontset-font
 nil 'japanese-jisx0208
 (font-spec :family "Hiragino_Mincho_ProN"))
